---
- name: Install git
  apt:
    name: "{{ packages }}"
  vars:
    packages:
    - git
  tags: ["git", "extra_packages"]

- name: add ansible repo to sources
  shell: echo "deb http://ppa.launchpad.net/ansible/ansible/ubuntu bionic main" | tee -a /etc/apt/sources.list
  become: yes
  tags: ["ansible"]

- name: add key for repo added above
  shell: apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 93C4A3FD7BB9C367
  become: yes
  tags: ["ansible"]

- name: updates a server
  apt: update_cache=yes
  become: yes
  tags: ["ansible"]

- name: upgrade a server
  apt: upgrade=full
  become: yes
  tags: ["ansible"]

- name: Install ansible
  apt:
    name: "{{ packages }}"
  vars:
    packages:
    - ansible
  become: yes
  tags: ["ansible", "extra_packages"]

- name: debug ansible version
  shell: ansible --version
  register: ansible_version
  tags: ["ansible"]

- name: print ansible version
  debug:
    msg: "{{ ansible_version }}"
  tags: ["ansible"]

- name: Install dnsutils
  apt:
    name: "{{ packages }}"
  vars:
    packages:
    - dnsutils
  tags: ["dnsutils", "extra_packages"]

- name: Install golang, jq
  apt:
    name: "{{ packages }}"
  vars:
    packages:
    - golang
    - jq
  tags: ["golang", "extra_packages"]

- name: whomai for debug
  shell: whoami
  register: user_info
  tags: ["golang"]

- debug:
    msg: "{{ user_info }}"
  tags: ["golang"]

- name: Create go dir
  file:
    path: "{{ ansible_env.HOME }}/go"
    state: directory
  #become: no
  #become_user: homelab  
  tags: ["golang", "extra_packages"]

- name: check go version
  command: go version
  register: result
  changed_when: no
  ignore_errors: true
  #become: no
  #become_user: homelab
  tags: ["golang", "extra_packages"]

- name: Debug go version result
  debug:
    var: result
  tags: ["golang"]
  
- name: Set GOPATH
  set_fact:
    go_path: "{{ lookup('env', 'GOPATH') | default(ansible_env.HOME+'/go', true) }}"
    go_bin: "{{ lookup('env', 'GOPATH') | default(ansible_env.HOME+'/go/bin/', true) }}"
  when: not result|failed
  #become: no
  #become_user: homelab
  tags: ["golang", "extra_packages"]

- name: go get govc
  shell: go get -u github.com/vmware/govmomi/govc
  environment:
    GOPATH: "{{ go_path }}"
  when: not result|failed
  #become: no
  #become_user: homelab
  tags: ["golang", "extra_packages"]

- name: go install govc
  shell: go install github.com/vmware/govmomi/govc
  environment:
    GOPATH: "{{ go_path }}"
  when: not result|failed
  #become: no
  #become_user: homelab
  tags: ["golang", "extra_packages"]

- name: govc test
  shell: govc version
  environment:
    GOPATH: "{{ go_path }}"
    PATH: "{{ go_bin }}"
  register: govc_result
  when: not result|failed
  #become: no
  #become_user: homelab
  tags: ["golang", "extra_packages"] 

- name: add gopath to user path for non-ansible logins
  shell: echo 'export GOPATH=$HOME/go' >> {{ ansible_env.HOME }}/.profile
  tags: ["golang", "extra_packages"]

- debug:
    msg: "{{ govc_result }}"
  tags: ["golang"]
#- name: Copy ovftool
#  copy:
#  `  src: "{{ role_path }}/files/ovftool/"
#    dest: "/mnt/usb/ovftool"
#    force: no
#  tags: ["ovftool", "extra_packages"]

- name: Copy ovftool
  copy:
    src: "/usr/lib/vmware-ovftool"
    dest: "/mnt/usb/nfs/"
    force: no
  tags: ["ovftool", "extra_packages"]

- name: Replace "shebang"
  lineinfile: 
    dest: "/mnt/usb/nfs/vmware-ovftool/ovftool"
    regexp: '^(.*)#!/bin/bash(.*)$' 
    line: '#!/bin/sh'
  tags: ["ovftool"]

- name: find the file we just copied without knowing the name
  find:
    paths: /mnt/usb/nfs/vmware-ovftool/
    file_type: "file"
    patterns: "ovftool*"
  register: find_result
  tags: ["ovftool", "extra_packages"]
- debug:
    var: find_result

- name: Add execute permission to file
  file:
    path: "{{ item.path }}"
    state: file
    mode: "u+x,g+x,o+x"  
  with_items: "{{ find_result.files }}"
  tags: ["ovftool", "extra_packages"]

- name: Create iso dir
  file:
    path: /mnt/usb/vcsa_iso
    state: directory
  tags: ["vcsa", "extra_packages"]

- name: Copy vcsa iso
  synchronize:
    src: "{{ role_path }}/files/vcsa/"
    dest: "/mnt/usb/nfs/vcsa"
  tags: ["vcsa", "extra_packages"]

- name: find the file we just copied without knowing the name
  find:
    paths: /mnt/usb/nfs/vcsa/
    file_type: "file"
    patterns: "*iso"
  register: find_result
  tags: ["vcsa", "extra_packages"]
- debug:
    var: find_result

- name: Mount iso
  command: "mount -o loop {{ item.path }} /mnt/usb/vcsa_iso"
  with_items: "{{ find_result.files }}"
  become: yes
  tags: ["vcsa", "extra_packages"]

- name: Create terraform dir
  file:
    path: "{{ ansible_env.HOME }}/terraform"
    state: directory
  #become: no
  #become_user: homelab  
  tags: ["terraform", "extra_packages"]

- name: download terraform
  get_url:
    url: https://releases.hashicorp.com/terraform/0.12.13/terraform_0.12.13_linux_arm.zip
    dest: "{{ ansible_env.HOME }}/terraform_0.12.13_linux_arm.zip"
    checksum: sha256:7e6f52d841e962a5c18ed73cec565338937bd6170299897f6398495462e798f9
  tags: ["terraform", "extra_packages"]

- name: unzip terraform
  unarchive:
    src: "{{ ansible_env.HOME }}/terraform_0.12.13_linux_arm.zip"
    dest: "{{ ansible_env.HOME }}/terraform"
    remote_src: yes
  tags: ["terraform", "extra_packages"]

- name: add go and terraform to user path for non-ansible logins
  shell: echo 'PATH="$HOME/go/bin:$HOME/terraform:$PATH"' >> {{ ansible_env.HOME }}/.profile
  tags: ["terraform", "golang", "extra_packages"]

- name: install pip for python 2.7
  apt:
    name: "{{ packages }}"
  vars:
    packages:
    - python-pip
  become: yes
  tags: ["python", "extra_packages"]

- name: Install jmespath for jquery
  pip:
    name: jmespath
  tags: ["python", "extra_packages"]

- name: Install dnspython
  pip:
    name: dnspython
  tags: ["python", "extra_packages"]
#export GOPATH=$HOME/go
#PATH="$HOME/go/bin:$PATH"

#Set-PSRepository -Name PSGallery -InstallationPolicy Trusted
# PS /home/homelab> Install-Module -Name VMware.PowerCLI -Scope CurrentUser