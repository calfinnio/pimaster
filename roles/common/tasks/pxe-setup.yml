---
- name: Create USB directory for mount
  file:
    path: "{{ item.mount_path }}"
    state: directory
  with_items: "{{ usb_vars }}"
  tags: ["usb"]

- name: Mount USB to directory
  mount:
    path: "{{ item.mount_path }}"
    src: /dev/sda1
    fstype: ext4
    state: mounted
  with_items: "{{ usb_vars }}"
  tags: ["usb"]

- name: Install Dnsmasq
  package:
    name: dnsmasq
    state: present
  tags: ["dnsmasq"]

- name: Install syslinux-common
  package:
    name: syslinux-common
    state: present
  tags: ["dnsmasq"]

- name: Creates directory
  file:
    path: "{{ item.tftp_root }}"
    state: directory
  with_items: "{{ dnsmasq_vars }}"
  tags: ["dnsmasq"]

- name: Set configuration file
  template:
    src: etc_dnsmasq.conf.j2
    dest: /etc/dnsmasq.conf
    validate: "dnsmasq --test --conf-file=%s"
  with_items: "{{ dnsmasq_vars }}"
  notify: restart_dnsmasq
  tags: ["dnsmasq"]

- name: Creates static hosts file
  file:
    path: "{{ item.dns_statichosts }}"
    state: touch
  with_items: "{{ dnsmasq_vars }}"
  notify: restart_dnsmasq
  tags: ["dnsmasq"]

- name: Create logrotate file for DHCP logs
  template:
    src: dnsmasq_logrotate.j2
    dest: /etc/logrotate.d/dnsmasq
  notify: restart_dnsmasq
  tags: ["dnsmasq"]

- name: Make sure Dnsmasq is running
  service:
    name: dnsmasq
    state: started
    enabled: yes
  tags: ["dnsmasq"]

- name: create users
  user: name=nginx
    uid=1010
    state=present
    shell=/bin/bash
  tags: ["nginx"]

- name: Install nginx
  package:
    name: nginx
    state: present
  tags: ["nginx"]

- name: Creates directory
  file:
    path: "{{ item.nginx_root }}"
    state: directory
  with_items: "{{ nginx_vars }}"
  tags: ["nginx"]

- name: copy nginx configuration file
  template:
    src: nginx.conf.j2
    dest: /etc/nginx/nginx.conf
    owner: nginx
    group: nginx
    mode: u=rw,g=r,o=r
  with_items: "{{ nginx_vars }}"
  notify: restart_nginx
  tags: ["nginx"]

- name: download syslinux
  get_url:
    url: https://www.kernel.org/pub/linux/utils/boot/syslinux/3.xx/syslinux-3.86.tar.gz
    dest: /home/homelab/syslinux-3.86.tar.gz
    checksum: sha256:c5fb189978d1a2d2041cc69a2956981e305ecd5cb9ce03f589d3fd1f1c434038
  tags: ["pxe"]

- name: Unarchive syslinux
  unarchive:
    src: /home/homelab/syslinux-3.86.tar.gz
    dest: /home/homelab/
    remote_src: yes
  tags: ["pxe"]

- name: Ansible copy files remote to remote
  copy:
    src: /home/homelab/syslinux-3.86/core/pxelinux.0
    dest: "{{ item.tftp_root }}"
    remote_src: yes
  with_items: "{{ esxi_host }}"
  tags: ["pxe"]

- name: Ansible copy files remote to remote
  copy:
    src: /home/homelab/syslinux-3.86/com32/menu/vesamenu.c32
    dest: "{{ item.tftp_root }}"
    remote_src: yes
  with_items: "{{ esxi_host }}"
  tags: ["pxe"]

- name: Create pxelinux.cfg directory
  file:
    path: "{{ item.tftp_root }}/pxelinux.cfg"
    state: directory
  with_items: "{{ esxi_host }}"
  tags: ["pxe"]

- name: Create default config for pxelinux.cfg
  template:
    src: default.j2
    dest: "{{ item.tftp_root }}/pxelinux.cfg/default"
  with_items: "{{ esxi_host }}"
  tags: ["pxe"]

- name: Install Wake-On-Lan
  package:
    name: wakeonlan
    state: present
  tags: ["wol"]

- name: Creates directory
  file:
    path: "{{ item.nfs_root }}"
    state: directory
  with_items: "{{ nfs_vars }}"
  tags: ["nfs"]

- name: Install NFS-Common packages
  apt:
    name: "{{ packages }}"
  vars:
    packages:
    - nfs-common
    - nfs-kernel-server
  tags: ["nfs"]

- name: copy /etc/exports
  template: 
    src: exports.j2
    dest: /etc/exports
    owner: root
    group: root
  with_items: "{{ nfs_vars }}"
  tags: ["nfs"]

- name: restart nfs server
  service: 
    name: nfs-kernel-server
    state: restarted
  tags: ["nfs"]

- name: Install git
  apt:
    name: "{{ packages }}"
  vars:
    packages:
    - git
  tags: ["git"]

- name: Install ansible
  apt:
    name: "{{ packages }}"
  vars:
    packages:
    - ansible
  tags: ["ansible"]
